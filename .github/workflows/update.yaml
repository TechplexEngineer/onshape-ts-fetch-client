name: Publish NPM Package

# Limit this work flow to 1 build/ref (branch) and cancel the build in progress when a new job kicks off
# See: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * WED'
    # "At 00:00 on Wednesday."

permissions:
  contents: write

jobs:
  job:
    strategy:
      fail-fast: false
      matrix:
        package:
          - onshape-ts-fetch-client

    runs-on: ubuntu-latest
    steps:
    - name: Check out this repo
      uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
        node-version-file: '.nvmrc'

    - name: Fetch OpenAPI Spec and generate code
      run: ./get-spec-and-build.sh

    - name: Run Tests
      env:
        ONSHAPE_ACCESS_KEY: ${{ secrets.ONSHAPE_ACCESS_KEY }}
        ONSHAPE_SECRET_KEY: ${{ secrets.ONSHAPE_SECRET_KEY }}
      run: |
        npm install
        npm run test

    - name: Commit and push if it changed
      run: |-
        ./update_package_json_from_openapi_json.sh

        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        git add -A
        git commit -m "Latest version: $(jq -r ".info.version" openapi.json)" || exit 0
        git push

    - name: Check preconditions
      id: checks
      shell: bash
      run: |
        latest="$(npm view --json ${{ matrix.package }} dist-tags.latest | jq -r)"
        version="$(jq -r .version package.json)"
        if [[ "$latest" != "$version" ]]; then
          echo "Latest:  $latest"
          echo "Current: $version"
          
          {
            echo "version=$version"
            echo "has_new_release=true"
          } >> $GITHUB_OUTPUT
        else
          echo "Already up to date: $version"
          echo "\`$version\` is already latest on NPM" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Publish
#      if: steps.checks.outputs.has_new_release == 'true'
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
      run: |
        version="${{ steps.checks.outputs.version }}"
        is_version_published="$(npm view ${{ matrix.package }} versions --json | jq -r '.[] | select(. == "'$version'") | . == "'$version'"')"
        
        if [[ "$is_version_published" == "true" ]]; then
          echo "Version $version already published, adding tag $tag"
          npm dist-tag add ${{ matrix.package }}@$version latest
        else
          echo echo "Publishing ${{ matrix.package }}@$version"
          npm run pack
          npm run publish
        fi
        echo "npm: \`+ ${{ matrix.package }}@$version\`" >> $GITHUB_STEP_SUMMARY

    - name: Create GitHub release for ORM package
      uses: actions/github-script@v6
      if: matrix.package == 'onshape-ts-fetch-client' && steps.checks.outputs.has_new_release == 'true'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const fs = require("fs");
            const path = require("path");
            const version = "${{ steps.checks.outputs.version }}";
            const mmp = "1.164.16301-d273853a12e7".split("-")[0]; //major minor patch
            const majorMinor = mmp.substring(0, mmp.lastIndexOf("."))
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${version}`,
              name: `${version}`,
              body: `https://www.onshape.com/en/changelog/#${majorMinor}`,
            });
            // await github.rest.repos.uploadReleaseAsset({
            //   owner: context.repo.owner,
            //   repo: context.repo.repo,
            //   release_id: release.data.id,
            //   name: `${{ matrix.package }}-${version}-dist.tgz`,
            //   data: fs.readFileSync(path.resolve("${{ matrix.package }}", "package.tgz")),
            // });
          } catch (e) {
            core.setFailed(e.message);
          }

